name: Run

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得して比較できるようにする

      - name: 基本情報を表示
        run: |
          echo 草は生やす物
          echo 多分
          date

      - name: 更新された部分を表示（プッシュ時）
        if: github.event_name == 'push'
        run: |
          echo "🔍 更新されたファイル一覧:"
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }}

          echo "📝 変更内容の詳細:"
          git diff --stat ${{ github.event.before }} ${{ github.event.after }}

          echo "📄 変更内容（最大10ファイル）:"
          git diff --unified=1 ${{ github.event.before }} ${{ github.event.after }} | head -n 300

      - name: 日記.mdの更新内容を特別に表示（プッシュ時）
        if: github.event_name == 'push'
        run: |
          # 日記.mdが更新されたかチェック
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "日記.md"; then
            echo "📔 日記.mdが更新されました"

            # 変更された日付セクションを特定
            CHANGED_DATES=$(git diff ${{ github.event.before }} ${{ github.event.after }} 日記.md | grep -E "^\+## [0-9]{4}-[0-9]{2}-[0-9]{2}" | sed 's/^+## //' | sort -r)

            if [ -n "$CHANGED_DATES" ]; then
              echo "📅 更新された日付: $CHANGED_DATES"

              # 各日付セクションの内容を表示
              for DATE in $CHANGED_DATES; do
                echo ""
                echo "## $DATE の日記内容:"

                # 日付セクションの開始行と終了行を取得
                START_LINE=$(grep -n "^## $DATE" 日記.md | cut -d: -f1)

                if [ -n "$START_LINE" ]; then
                  # 次の日付セクションまたはファイル終端までを取得
                  NEXT_DATE_LINE=$(tail -n +$((START_LINE + 1)) 日記.md | grep -n "^##" | head -1 | cut -d: -f1)

                  if [ -n "$NEXT_DATE_LINE" ]; then
                    END_LINE=$((START_LINE + NEXT_DATE_LINE - 1))
                  else
                    # 次の日付がない場合はファイル終端まで
                    END_LINE=$(wc -l < 日記.md)
                  fi

                  # 日付セクションの内容を抽出（detailsタグ内は除外）
                  SECTION_CONTENT=$(sed -n "${START_LINE},${END_LINE}p" 日記.md)

                  # detailsタグ内の内容を除外して表示
                  echo "$SECTION_CONTENT" | awk '
                    BEGIN { in_details = 0; print_line = 1; }
                    /^<details>/ { in_details = 1; print_line = 0; }
                    /^<\/details>/ { in_details = 0; print_line = 0; next; }
                    { if (print_line) print; }
                    { if (!in_details) print_line = 1; }
                  '

                  # 追加された行を「+」付きで表示
                  echo ""
                  echo "📝 追加された内容（+付き）:"
                  git diff ${{ github.event.before }} ${{ github.event.after }} 日記.md | grep -A 100 "^## $DATE" | grep -B 100 -m 1 "^## " | grep "^\+" | grep -v "^+## " | sed 's/^\+/+ /' | grep -v "<details>" | grep -v "</details>" | grep -v "^+ <summary>" | grep -v "^+ \`\`\`" | grep -v "^+ $"
                fi
              done
            else
              echo "日付セクションの追加はありませんでしたが、既存の日付セクション内で更新があった可能性があります。"

              # 変更された行を表示（detailsタグ内は除外）
              echo ""
              echo "📝 更新された内容（+付き）:"
              git diff ${{ github.event.before }} ${{ github.event.after }} 日記.md | grep "^\+" | grep -v "^+++" | sed 's/^\+/+ /' | grep -v "<details>" | grep -v "</details>" | grep -v "^+ <summary>" | grep -v "^+ \`\`\`" | grep -v "^+ $"
            fi
          fi
