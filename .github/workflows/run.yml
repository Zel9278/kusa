name: Run

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得して比較できるようにする

      - name: 基本情報を表示
        run: |
          echo 草は生やす物
          echo 多分
          date

      - name: 更新された部分を表示（プッシュ時）
        if: github.event_name == 'push'
        run: |
          echo "🔍 更新されたファイル一覧:"
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }}

          echo "📝 変更内容の詳細:"
          git diff --stat ${{ github.event.before }} ${{ github.event.after }}

          echo "📄 変更内容（最大10ファイル）:"
          git diff --unified=1 ${{ github.event.before }} ${{ github.event.after }} | head -n 300

      - name: 日記.mdの更新内容を特別に表示（プッシュ時）
        if: github.event_name == 'push'
        run: |
          # 日記.mdが更新されたかチェック
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -q "日記.md"; then
            echo "📔 日記.mdが更新されました"

            # 更新後の日記.mdを取得
            git show ${{ github.event.after }}:日記.md > diary_current.txt

            # 変更内容を取得
            git diff ${{ github.event.before }} ${{ github.event.after }} 日記.md > diff_output.txt

            # 追加された日付セクションを特定
            ADDED_DATES=$(grep -E "^\+## [0-9]{4}-[0-9]{2}-[0-9]{2}" diff_output.txt | sed 's/^\+## //' | cut -d' ' -f1 | sort -r)

            # 変更された行を含む日付セクションを特定
            CHANGED_SECTIONS=$(grep -E "^@@ .* @@ ## [0-9]{4}-[0-9]{2}-[0-9]{2}" diff_output.txt | sed -E 's/^@@ .* @@ ## ([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/' | sort -r | uniq)

            # 両方をマージして重複を削除
            ALL_DATES=$(echo "$ADDED_DATES $CHANGED_SECTIONS" | tr ' ' '\n' | sort -r | uniq)

            if [ -n "$ALL_DATES" ]; then
              echo "📅 更新された日付: $ALL_DATES"

              # 各日付セクションを処理
              for DATE in $ALL_DATES; do
                if [ -z "$DATE" ]; then
                  continue
                fi

                echo ""
                echo "## $DATE の日記内容:"

                # 日付セクションの開始行と終了行を取得
                START_LINE=$(grep -n "^## $DATE" diary_current.txt | head -1 | cut -d: -f1)

                if [ -n "$START_LINE" ]; then
                  # 次の日付セクションまでを抽出
                  NEXT_LINE=$(tail -n +$((START_LINE + 1)) diary_current.txt | grep -n "^## " | head -1 | cut -d: -f1)

                  if [ -n "$NEXT_LINE" ]; then
                    END_LINE=$((START_LINE + NEXT_LINE - 1))
                    # 日付セクションの内容を抽出
                    sed -n "${START_LINE},${END_LINE}p" diary_current.txt > section_content.txt
                  else
                    # 次のセクションがない場合はファイル終端まで
                    sed -n "${START_LINE},\$p" diary_current.txt > section_content.txt
                  fi

                  # detailsタグ内の内容を除外して表示
                  cat section_content.txt | awk '
                    BEGIN { in_details = 0; }
                    /^<details>/ { in_details = 1; next; }
                    /^<\/details>/ { in_details = 0; next; }
                    /^<summary>/ { next; }
                    { if (!in_details) print; }
                  '

                  # 追加された行を「+」付きで表示
                  echo ""
                  echo "📝 追加された内容（+付き）:"

                  # 日付セクション内の追加された行を抽出して表示
                  ADDED_LINES=$(grep -A 1000 "^@@ .* @@ ## $DATE" diff_output.txt |
                    grep -B 1000 -m 1 "^@@ " |
                    grep "^\+" |
                    grep -v "^+## " |
                    grep -v "^+++" |
                    grep -v "^+@@ " |
                    sed 's/^\+/+ /' |
                    grep -v "+ <details>" |
                    grep -v "+ </details>" |
                    grep -v "+ <summary>" |
                    grep -v "+ \`\`\`")

                  if [ -n "$ADDED_LINES" ]; then
                    echo "$ADDED_LINES"
                  else
                    echo "(追加された内容はありません)"
                  fi
                fi
              done
            else
              echo "日記.mdが更新されましたが、日付セクションの変更は検出されませんでした。"

              # 変更された行を表示（detailsタグ内は除外）
              echo ""
              echo "📝 更新された内容（+付き）:"
              ADDED_LINES=$(grep "^\+" diff_output.txt |
                grep -v "^+++" |
                grep -v "^+@@ " |
                sed 's/^\+/+ /' |
                grep -v "+ <details>" |
                grep -v "+ </details>" |
                grep -v "+ <summary>" |
                grep -v "+ \`\`\`")

              if [ -n "$ADDED_LINES" ]; then
                echo "$ADDED_LINES"
              else
                echo "(追加された内容はありません)"
              fi
            fi

            # 一時ファイルを削除
            rm -f diary_current.txt diff_output.txt section_content.txt
          fi
